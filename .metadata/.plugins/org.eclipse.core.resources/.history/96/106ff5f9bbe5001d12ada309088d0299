package edu.kh.comm.member.controller;

import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import edu.kh.comm.member.model.service.MyPageService;
import edu.kh.comm.member.model.vo.Member;

// /member/myPage/profile
// /member/myPage/info
// /member/myPage/changPw
// /member/myPage/secession(탈퇴)

@Controller
@RequestMapping("/member/myPage")
@SessionAttributes({"loginMember"}) //session scope에서 loginMember를 얻어옴
public class MyPageController {
	
	
	//MyPageService 연결
	@Autowired
	private MyPageService service;
	
	//회원 정보 조회 이동
	@GetMapping("/info")
	public String info() {
		return "member/myPage-info"; //jsp 이름
		
	}
	
	// 비밀번호 변경 이동
	   @GetMapping("/changePw")
	   public String changePw() {
	   
	      return "member/myPage-changePw";
	   }
	   
	   // 회원탈퇴 이동
	   @GetMapping("/secession")
	   public String secession() {
	   
	      return "member/myPage-secession";
	   }
	   
	 
	
	//비밀번호 변경 (암호화 필요)
	@GetMapping("/changePw")
	public String changePw(@RequestParam Map<String, Object> paramMap,
							@ModelAttribute("loginMember") Member loginMember,
							RedirectAttributes ra) {
		
		//로그인된 회원의 번호를 paramMap에 추가
		paramMap.put("memberNo", loginMember.getMemberNo());
		
		//비밀번호 변경 서비스 호출
		//changePw라는 매서드 만들어줌
		int result = service.changePw(paramMap);
		
		//서비스 임플 3번하고 dao-> mapple 갔다가옴
		String message = null;
		String path = null;
		
		if(result > 0) {
			message = "비밀번호 성공";
			path="info";
		}else {
			message="현재 비밀번호가 일치하지 않습니다.";
			path ="changPw";
		}
		
		ra.addFlashAttribute("message", message);
		return "redirect: " + path;
		
//		return "member/myPage-changePw"; //jsp 이름
		
	}
	

	//회원 탈퇴 이동 (현재 비밀번호 체크, session도 없애야함, cookie도 없애야함)
	@PostMapping("/secession")
	public String secession(@ModelAttribute("loginMember") Member loginMember,
								SessionStatus status,
								HttpServletRequest req,
								HttpServletResponse resp,
								RedirectAttributes ra) {
		//회원 탈퇴 서비스 호출
		int result = service.secession(loginMember);
		
		
//		돌아옴
		
		String message = null;
		String path=null;
		
		if(result > 0 ) {
			message="탈퇴 되었습니다";
			path="/"; //메인페이지
			
			//세션없애기
			status.setComplete();
			
			//쿠키없애기
			//add쿠키해야해서 쿠키 객체를 새로 만들어야한다
			Cookie cookie = new Cookie("saveId", "");
			//" " 아무것도 없는 값으로 덮어씌움
			cookie.setMaxAge(0);
			//cookie 0살만들기
			cookie.setPath(req.getContextPath());
			resp.addCookie(cookie);
			
		}else {
			message="현재 비밀번호가 일치하지 않습니다.";
			path="secession"; //현재페이지 유지
		}
		
		ra.addFlashAttribute("message", message);
		return "redirect:" + path;
	}

	//프로필 변경 이동
	@GetMapping("/profile")
	public String profile() {
		return "member/myPage-profile"; //jsp 이름
		
	}
	
	//회원 정보 수정controller
	@PostMapping("/info")
	public String updateInfo(@ModelAttribute("loginMember") Member loginMember,
							@RequestParam Map<String, Object> paramMap,
							//요청 시 전달된 파라미터를 구분하지 않고 모두 Map에 담아서 얻어옴
							String[] updateAddress,
							RedirectAttributes ra) { //<-addFlashAttribute 이거 쓰려면 적어줘야함
				
		
		
		//필요한 값
		//- 닉네임
		//- 전화번호
		//- 주소
		//- 회원번호(Session -> 로그인한 회원 정보를 통해 얻어옴)
		//	-> Session에 있는 값을 얻어오는 방법(2ea) : @SessionAttributes, @ModelAttribute 필요
		
		//@SessionAttributes
		// 1) Model에 세팅된 데이터의 Key와 
		//    @SessionAttributes(클래스에 작성함)에 작성된 key가 같으면 
		// 		Model 세팅된 데이터를 request -> session scope로 이동시켜주는 역할
		
		//2) 기존에 session scope에 이동시킨 값을 얻어오는 역할도 수행한다. 
		// @ModelAttribute("loginMember") Member loginMember
		//					[session key]
		//					--> @SessionAttributes를 통해 session scope에 등록된 값을 얻어와 
		//					오른쪽에 작성된 Member loginMember 변수에 대입
		//					단, 클래스 위에 @SessionAttributes({"loginMember"})가 작성되어 있어야 가능
				
		//***매개변수를 이용해서 session, 파라미터 데이터를 동시에 얻어올때 문제점***
		//session에서 객체를 얻어오기 위해 매개변수에 작성한 상태에서 
		// == @ModelAttribute("loginMember") Member loginMember
				
		//파라미터의 name(jsp) 속성값이 매개변수에 작성된 객체(loginMember)(vo)의 필드와 일치하면
		//-> name ="memberNickname"
		//session에서 얻어온 객체의 필드에 덮어쓰기가 된다.		
				
		//[해결방법] 파라미터의 name 속성을 변겨애서 얻어오면 문제 해결! 
		//(필드명이 겹쳐서 문제니까 겹치지 않게 하자)
				
		//파라미터를 저장한 ParamMap에 회원 번호, 주소를 추가한다.
		String memberAddress=String.join(",,", updateAddress);
		
		//주소가 미입력 되었을때
		if(memberAddress.equals(",,,,")) memberAddress = null;  //하나라서 바로 써줌
		paramMap.put("memberNo", loginMember.getMemberNo());
		paramMap.put("memberAddress", memberAddress);
		
		//회원 정보 수정 서비스 호출
		int result = service.updateInfo(paramMap);
		
		//--------------------------돌아와따
		String message = null;
		
		if(result > 0) {
			message = "회원 정보가 수정되었습니다.";
			
			//DB - Session의 회원정보 동기화
			loginMember.setMemberNickname((String)paramMap.get("updateNickname"));
			loginMember.setMemberTel((String)paramMap.get("updateTel"));
			loginMember.setMemberAddress((String)paramMap.get("memberAddress"));
			
		}else {
			message = "회원 정보 수정 실패..";
		}
		
		ra.addFlashAttribute("message", message);
		
		//성공여부 상관없이 info 페이지로 간다.
		return "redirect:info";
		
	}

}
