package edu.kh.comm.member.controller;


import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import edu.kh.comm.member.model.service.MemberService;
import edu.kh.comm.member.model.service.MemberServiceImpl;
import edu.kh.comm.member.model.vo.Member;

// extends를 사용하면 pojo를 위배하는것
//POJO 기반 프레임워크: 외부 라이브러리를 상속하면 안된다.
// 그렇기때문에 extends를 사용할 수 없다.

//*****************************************************
//class: 객체를 만들기 위한 설계도 
//-> 객체 생성 new 연산자 사용해서 클래스명 써서 불러옴(기존)
//-> 객체로 생성 되어야지 기능 수행이 가능함 new 클래스명()
//--> IOC(제어의 역전, 객체 생명주기를 스프링이 관리) 그렇기 때문에 객체 생성할 수 없음
//** 이때, 스프링이 생성한 객체 == bean 이라고 한다.
//*****************************************************

//bean 등록 == 스프링이 객체로 만들어서 가지고 있어라.
//1. 어노테이션(@Component -> @Controller) 
// 스프링이 memberController를 객체화 하여 갖고있음
//@Component // 해당 클래스를 bean으로 등록하라고 프로그램에게 알려주는 주석(annotation)

//역할: 서블릿으로 컨트롤러 하기 위해 만들어짐
//그래서 @Controller로 어노테이션 함
@Controller//생성된 bean이 Controller임을 명시 + bean 등록 

//2.RequestMapping("/url")
//->해당 url은 클라이언트가 요청함
@RequestMapping("/member") //localhost:8080/comm/member 이하의 모든 요청을 처리하는 컨트롤러 
//-> handler Mapping 부분
//원래는 로그인, signUp 등 모든 서블릿을 만들어줬엇지만 Requestmapping을 사용하여 모든 요청을
//한개로 컨트롤 할 수 있다. 

//session scope로 올리고 싶은 key값을 써주면된다.
//Model에 추가된 값의 key와 어노테이션에작성된 값이 같으면 해당 값을 session scope로 이동시키는 역할을 한다.
@SessionAttributes({"loginMember"})
public class MemberController {
	
	//4.로거 만들기
	private Logger logger = LoggerFactory.getLogger(MemberController.class);
	//-------------------------------------------------
	
//	//service, dao 불러오기
//	private MemberService service = new MemberServiceImpl(); //IOC(제어의 역전) -> new연산자 쓰지 못함
//	//다형성  부모                              자식
	@Autowired  //bean으로 등록된 객체 중 타입이 같거나, 상속관계인 bean을 주입해주는 역할
	//MemberService를 갖고와서 쓴다!
	private MemberService service; //IOC + DI (의존성 주입 == Autowired)
	
	//Controller : 요청/ 응답을 제어하는 역할을 지닌 클래스 
	/*@RequstMapping : 클리언트 요청(url)에 맞는 클래스 or 메서드를 연결시켜주는 어노테이션
	 *
	 *[위치에 따른 해석]
	 *- 클래스 레벨(클래스 위에 적은 RequestMapping 어노테이션) : 공통주소를 작성
	 *- 메서드 레벨(메서드 위에 적는 것) : 공통주소 외 나머지 하위 주소를 작성
	 * 
	 * 단, 클래스 레벨에 @RequestMapping이 존재하지 않는다면
	 * - 메서드 레벨은 단독 요청 처리 주소이다. 
	 * 만약에, 위에 클래스에 해당 어노테이션이 없는데 메서드에만 어노테이션이 되어있으면
	 * //localhost:8080/comm/login 이렇게 진행되기 때문에 member/login과 다르다.
	 *-> login 메서드에 단독으로 요청을 보냄
	 * 
	 * [작성법에 따른 해석]
	 * 1) @RequestMapping("url")
	 * --> 요청 방식(get/post) get,post 관계 없이 url이 일치하는 요청을 처리한다.
	 * 
	 * 2) @RequestMapping(value = "url", method=RequestMethod.GET | POST)
	 * --> get으로 원하면 get으로 post로 적혀있으면 post로 요청 처리
	 *	== 요청 방식에 따라 요청을 처리한다. 
	 *
	 * ** 메서드 레벨에서 get/post 방식을 구분하여 매핑 **
	 * 일반적으로 많이 씀!
	 * @GetMapping("url") / @PostMempping("url")
	 * 
	 */
	
//	//3. 파라미터 얻어오기 1번
//	
//	//로그인
//	// 요청시 파라미터를 얻어오는 방법 1
//	// -> HttpServletRequest를 이용하여 얻어올 수 있다. 
//	
//	//login 메서드
//	//localhost:8080/comm/member/login
//	//login에 들어오는 요청은 아래로 들어온다!
//	@RequestMapping("/login")
//	public String login(HttpServletRequest req) {
//		
//		//5. 로거 실행되는지 확인
//		logger.info("로그인 요청됨");
//		
//		//--- 4해당 부분 
//		String inputEmail = req.getParameter("inputEmail");
//		String inputPw = req.getParameter("inputPw");
//		
//		//---5해당 부분
//		logger.debug("inputPw:: " + inputPw);
//		logger.debug("inputEmail:: " + inputEmail);
//		/* 로그인창에 아이디 비번을 치면 
//		 * 2023-04-21 19:25:43 [INFO] 로그인 요청됨
//		 * 2023-04-21 19:25:43 [DEBUG] inputPw:: pass03#
//			2023-04-21 19:25:43 [DEBUG] inputEmail:: user03@kh.or.kr
//			콘솔창에 뜬다
//		 */
//		
//		
//		return "redirect:/";
//	
//	
//	
//	}
	
	// 3. 요청시 파라미터 얻어오는 방법 2 
	//-> @RequestParam 어노테이션 사용 
	

	//작성방법 : @RequestParam("name 속성값") 자료형 변수명
	//- 클라이언트 요청 시 같이 전달 된 파라미터를 변수에 저장
	// --> 어떤 파라미터를 변수에 저장할지는 "name 속성값"을 이용해 지정한다. 
	
//	@RequestMapping("/login")
//	public String login(@RequestParam("inputEmail") String email,
//						@RequestParam("inputPw") String pw) {
//		logger.info("로그인 요청됨");
//		
//		logger.debug("email : " + email);
//		logger.debug("pw : " + pw);
//		
//		return "redirect:/";
//	}
	
	// 더 줄이기 
	// @RequestParam을 생략하지만 파라미터를 얻어오는 방법!
	// -> name 속성값 파라미터를 저장할 변수 이름을 동일하게 작성
	
//	@RequestMapping("/login")
//	public String login(String inputEmail, String inputPw,
//			@RequestParam(value="inputName", required=false, defaultValue="홍길동") String inputName) {
//		//현재 inputName 값은 없지만 required= false 포함되지 않으면 defaultValue="홍길동" 기본값을
//		//출력해줘라!!!!!!! 임! 
//		//-> required는기본값이 true이기 때문에 inputName이 있다면 해당 inputName값을 출력해줄것임
//
//		
//		logger.info("로그인 요청됨");
//		
//		logger.debug("email : " + inputEmail);
//		logger.debug("pw : " + inputPw);
//		logger.debug("inputName: " + inputName);
//		
//		return "redirect:/";
//	}
//	
//	//RequestParam 속성
//	/*
//	 * value: input 태그의 name 속성값
//	 * required : 입력된 name 속성값이 필수적으로 파라미터에 포함되어야 하는지를 지정
//	 * 		required = true / false( 기본값 true)
//	 * defaultValue: required가 false인 상태에서 파라미터가 존재하지 않을 경우 값을 지정 
//	 */
	
	//3. 요청시 파라미터를 얻어오는 방법 3
	//->@ModelAttribute 어노테이션 사용
	
	//[@ModelAttribute를 매개변수에 작성하는 경우]
	//@ModelAttribute VO타입 변수명 
	
//	@RequestMapping(value = "url", method=RequestMethod.POST) 
	@PostMapping("/login")
	public String login(@ModelAttribute Member inputMember,
			Model model,
			RedirectAttributes ra,
			HttpServletResponse resp,
			HttpServletRequest req,
			///requestParam은 항상 true가 기본값이기 때문에 
			// cookie는 선택사항이라 false로 바꿔줘야한다.
			@RequestParam(value="saveId", required=false) String saveId) {
		
		
	
		logger.info("로그인 기능 수행됨");
		
		//memberservice 불러오기
		//아이디, 비밀번호가 일치하는 회원 정보를 조회하는 service 호출 후 반환 받기
		Member loginMember = service.login(inputMember);
		
		/*
		 * Model: 데이터를 맵 형식(K:V) 형태로 담아 전달하는 용도의 객체
		 * -> request, session을 대체하는 객체
		 * 
		 * - 기본 scope는 request
		 * - session scope로 변환하고 싶은 경우
		 * 	클래스 레벨로 @SessionAttributes를 작성하면 된다.
		 *
		 */
		
		//로그인 성공시
		
		if(loginMember != null) { //로그인 성공 시
			model.addAttribute("loginMember", loginMember);
			
			//로그인 성공 시 무조건 쿠키 생성
			//단, 아이디 저장 체크 여부에 따라서 쿠키의 유지 시간을 조정
			//Spring에서 만드는 방법이 따로없기 때문에 서블릿에서 했던 방법 그대로 사용하긔
			
			Cookie cookie = new Cookie("saveId", loginMember.getMemberEmail());
			
			if(saveId!=null) { //아이디 저장이 체크 되었을 때
				
				cookie.setMaxAge(60*60*24*365);//초 단위로 지정 (1년) 
				
			} else { //체크 안되었을 때
				cookie.setMaxAge(0); //0초 -> 생성되지마자 사라짐 == 쿠키 삭제
				
			}
			
			//쿠키가 적용될 범위(경로) 지정
//			cookie.setPath("/comm"); -> 프로젝트명은 언제든지 바뀔 수 있기 때문에 상위 경로 만들어줌
			cookie.setPath(req.getContextPath());
			
			//쿠키를 응답 시 클라이언트에게 전달
			resp.addCookie(cookie);
			
		}else { //로그인 실패 시
			//현재 message는 request scope
			// 위로 올라가서 session scpe에 message를 올려놔야한다.
			//model.addAttribute("message", "아이디 또는 비밀번호가 일치하지 않습니다.");
			
			ra.addFlashAttribute("message", "아이디 또는 비밀번호가 일치하지 않습니다.");
			//request scpe인데 reirect가 있기 때문에 flash도움을 받아 session으로 갔다가
			//다시 request로 돌아옴
			
			//addAttribute는 controller가 꼭 필요함
			//그러나 addFlashAttribut는 controller가 없음 -> 그래서 안됨
			
		}
		
		
	
		
		//-> create눌러서 서비스에 객체만들기
		
		return "redirect:/";
	}
	//로그아웃
	//a태그는 get 요청
	@GetMapping("/logout")
	public String logout(/*HttpSession session*/
			SessionStatus status) {
		
		// 로그아웃 == 세션을 없애는 것
		//* @SessionAttributes을 이용해서 session scope에 배치된 데이터는
		// SessionStatus라는 별도 객체를 이용해야만 없앨 수 있다. 
		
		logger.info("로그아웃 수행됨");
		
		//session.invalidate(); // 기존 세션 무효화 방식으로는 안된다
		status.setComplete(); //세션이 할 일이 완료됨 -> 없앰
		
		
		return "redirect:/";
	}

	
	//회원 가입 화면으로 전환하는 메소드 작성
	@GetMapping("/signUp") // Get 방식 : /comm/member/signUp 요청이 온것!
	public String signUp() {
		
		return "member/signUp";
	}
	
	@ResponseBody //ajax 응답 시 사용
	@GetMapping("/emailDupCheck") //email url
	//이메일 중복 검사 
//	public String emailDupCheck(@RequstParam("memberEamil") String memberEmail)
	public int emailDupCheck(String memberEmail){
//		int result = service.emailDupCheck();
		
		/*
		 * 컨트롤러에서 반환되는 값은 forward 또는 redirect를 위한 경로인 경우가 일반적
		 * -> 반환되는 값은 경로로 인식됨
		 * 
		 * -> 이를 해결하기 위한 어노테이션 @ResponseBody가 존재함
		 *
		 *
		 * @ResponseBody: 반환되는 값을 응답의 몸통(body)에 추가하여 이전에 요청 주소로 돌아감
		 * -> 컨트롤러에서 반환되는 값이 경로가 아니라 '값 자체'로 인식됨
		 */
		
		return service.emailDupCheck(memberEmail);
	}
	
	//닉네임 중복 검사
	
	@ResponseBody
	@GetMapping("/nicknameDupCheck")
	public int nicknameDupCheck(String memberNickname) { //ajax로 돌려줘야해서 int
		return service.nicknameDupCheck(memberNickname);
	}
	
	
	//회원가입 (sqlSession.insert()) --> <insert></insert>
//	
//	//@ModelAttribute vo타입 변수명
//	@PostMapping("/signUp")
//	public String signUp(@ModelAttribute Member memberSignUp, Model model) {
//	    Member signUpMember = service.signUp(memberSignUp);
//
//	    if (signUpMember != null) { // 회원가입 성공 시
//	        return "redirect:/";
//	    } else { // 회원가입 실패 시
//	        model.addAttribute("errorMessage", "회원가입에 실패했습니다.");
//	        return "member/signUp";
//	    }
//	}
	@PostMapping("/signUp")
				//name값이 일치해서 Member 파라미터랑 vo필더값이랑 같음 @ModelAttribute
	public String signUp(Member inputMember,
						String[] memberAddres,
						RedirectAttributes ra) { //주소만 따로 배열로 받아준다. 
		//주소는 name="memberAddress"이 세개가 같기 때문에 String으로 합쳐서 들어온다. 
		// -> 나중에 수정할때 한꺼번에 db에서 불러오면 수정하기가 어렵다. 
		// 그래서 구분자가 필요하다. 그래서 배열로 받아옴
		/*
		 * 같은 name을 가진 주소가 하나의 문자열로 합쳐서 세팅되어 있다.
		 * -> 도로명 주소에 ","기호가 포함되는 경우가 있어 이를 구분자로 사용할 수 없다.
		 * String[] memberAddress:
		 * name이 memberAddress인 파라미터의 값을 모두 배열에 담아서 반환하고 있다.
		 * 
		 */
		
		inputMember.setMemberAddress(String.join(",,", memberAddres));//-> setMemberAddress에 세팅
		
		//String.join("구분자", 배열)
		//배열을 하나의 문자열로 합치는 메서드
		//주간에 구분자가 포함되어 문자열이 생성된다.
		// [a,b,c] -> join진행 -> "a,,b,,c"로 나온다
		
		if(inputMember.getMemberAddress().equals(",,,,")) {//주소가 입력되지 않은 경우
			inputMember.setMemberAddress(null); //주소 입력하지 않았으면 null로 변환하겠다!
		}
		
		//회원가입 서비스 호출
		int result = service.signUp(inputMember);
		
		String message = null;
		String path = null;
		
		//회원 가입 성공 시 -> 메인 페이지로
		if(result > 0) {
			
			message="회원 가입 성공";
			path ="redirect:/"; //메인페이지
		}else {
			//실패 시 -> 회원가입 페이지
			message="회원 가입 실패";
			path="redirect: /member/signtUp";
	
		}
		
		ra.addFlashAttribute("message", message);
		return path;
			
		}
		
		
		
	
	
	//회원 1명 정보 조회(ajax) (sqlSession.selectOne())

//	@ResponseBody
//	@PostMapping("/selectOne")
//	public Member selectOne(String memberEmail) {
//		Member oneMem = service.selectOne(memberEmail);
//		return oneMem;
//	}
//	
	   // 회원 조회
	   @ResponseBody
	   @GetMapping("/selectOne")
	   public Member selectOne(String memberEmail) {
	      
	      Member selectOne = service.selectOne(memberEmail); // 돌아오는 값이 멤버 자체이기 때문에 멤버에 담아준다.
	      
	      return  selectOne;
	   }
	
	//회원 목록 조회(ajax) (sqlSession.selectList())
	
	@ResponseBody
	@GetMapping("/selectAll")
	public List<Member> memberList() {
	    // Controller에서 Service 단으로 DAO 요청
	    List<Member> memList = service.memList();
	    return memList;
	}
	
	
	/* 
	 * 스프링 예외 처리 방법(3가지, 중복 사용 가능)
	 * 
	 * 1순위: 메서드 별로 예외처리(try-catch / throws)
	 * 
	 * 2순위: 하나의 컨트롤러에서 발생하는 예외를 모아서 처리
	 *      -> 어노테이션이 존재,  @ExceptionHandler 는 메서드에 작성한다. 
	 * 
	 * 3순위:전역(웹 애플리케이션에서 발생하는 예외를 모아서 처리
	 * 	    -> @ControllerAdvice 는 클래스에 작성한다. 
	 * 	    -> 클래스 별도로 하나 만들어서 예외처리만 진행한다.
	 */
	
	//---------------------------------------------------
	
	//회원 컨트롤러에서 발생하는 모든 예외를 모아서 처리
//	@ExceptionHandler(Exception.class)  //(Exception.class) 최상위 경로 적는게 제일 좋음
//	public String exceptionHandler(Exception e, Model model) { //model 데이터 전달하는 객체
//		e.printStackTrace(); //에러의 발자국 -> 작성하면 콘솔에 에러날때 뜸
//		
//		model.addAttribute("errorMessage", "서비스 이용 중 문제가 발생했습니다.");
//		model.addAttribute("e", e);
//		
//		// MemberController안에 모든 메소드의 에러를 처리하기 때문에 정확하게 어디서 에러가났는지 알수없음
//		//그래서 멘트를 서비스 중~이라고 적었음 
//		//이렇게만 적으면 MemberController에서 발생하는 것만 처리함 -> 다른 controller에서 나는 에러는 잡을 수 없음
//		
//		return "common/error"; //common에 있는 error.jsp로 보냄
//	}
//	

}
